---
AWSTemplateFormatVersion: "2010-09-09"
Description: ECS/EC2

Parameters:
  ClusterName:
    Type: String
  VpcId:
    Type: String
  ServiceSubnets:
    Type: List<AWS::EC2::Subnet::Id>
  AmiId:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  InboundIpAddress:
    Description: Global IP Address you access to the application.
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
  #---------------------------------
  # ECS Role
  #---------------------------------
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ClusterName}-ECSTaskExecutionRole"
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ClusterName}-ECSTaskRole"
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  #---------------------------------
  # ECS Cluster
  #---------------------------------
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName
      CapacityProviders:
        - !Ref ECSCapacityProvider
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref ECSCapacityProvider
          Base: 1
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  #---------------------------------
  # ECS CapacityProvider & AutoScaling Group
  #---------------------------------
  ECSCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref AutoScalingGroup
        ManagedScaling:
          MaximumScalingStepSize: 10
          MinimumScalingStepSize: 1
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: ENABLED
      Tags:
        - Key: environment
          Value: production
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs ""
      LaunchConfigurationName: !Ref ContainerInstances
      MaxSize: 1
      MinSize: 1
      NewInstancesProtectedFromScaleIn: True
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-ecs-autoscaling"
          PropagateAtLaunch: True

  #---------------------------------
  # EC2 LaunchConfiguration and misc
  #---------------------------------
  ContainerInstances:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      ImageId: !Ref AmiId
      SecurityGroups:
        - !Ref ECSSecurityGroup
      InstanceType: "t3.small"
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: "30"
            VolumeType: "gp2"
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ClusterName}-ecs-sg"
      GroupDescription: !Sub "${ClusterName}-ecs-sg"
      VpcId: !Ref "VpcId"
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-ecs-sg"
  SecurityGroupIngress80:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt "ECSSecurityGroup.GroupId"
      IpProtocol: "tcp"
      FromPort: 80
      ToPort: 80
      CidrIp: !Ref InboundIpAddress
  SecurityGroupEgress01:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt "ECSSecurityGroup.GroupId"
      IpProtocol: "-1"
      CidrIp: 0.0.0.0/0

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref "EC2InstanceRole"

Outputs:
  ECSTaskExecutionRoleName:
    Value: !Ref ECSTaskExecutionRole
  ECSTaskRoleArn:
    Value: !GetAtt ECSTaskRole.Arn
  ECSSecurityGroupId:
    Value: !GetAtt ECSSecurityGroup.GroupId
